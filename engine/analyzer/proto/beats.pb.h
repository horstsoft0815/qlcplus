// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: beats.proto

#ifndef PROTOBUF_INCLUDED_beats_2eproto
#define PROTOBUF_INCLUDED_beats_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_beats_2eproto 

namespace protobuf_beats_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_beats_2eproto
namespace mixxx {
namespace track {
namespace io {
class Beat;
class BeatDefaultTypeInternal;
extern BeatDefaultTypeInternal _Beat_default_instance_;
class BeatGrid;
class BeatGridDefaultTypeInternal;
extern BeatGridDefaultTypeInternal _BeatGrid_default_instance_;
class BeatMap;
class BeatMapDefaultTypeInternal;
extern BeatMapDefaultTypeInternal _BeatMap_default_instance_;
class Bpm;
class BpmDefaultTypeInternal;
extern BpmDefaultTypeInternal _Bpm_default_instance_;
}  // namespace io
}  // namespace track
}  // namespace mixxx
namespace google {
namespace protobuf {
template<> ::mixxx::track::io::Beat* Arena::CreateMaybeMessage<::mixxx::track::io::Beat>(Arena*);
template<> ::mixxx::track::io::BeatGrid* Arena::CreateMaybeMessage<::mixxx::track::io::BeatGrid>(Arena*);
template<> ::mixxx::track::io::BeatMap* Arena::CreateMaybeMessage<::mixxx::track::io::BeatMap>(Arena*);
template<> ::mixxx::track::io::Bpm* Arena::CreateMaybeMessage<::mixxx::track::io::Bpm>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace mixxx {
namespace track {
namespace io {

enum Source {
  ANALYZER = 0,
  FILE_METADATA = 1,
  USER = 2
};
bool Source_IsValid(int value);
const Source Source_MIN = ANALYZER;
const Source Source_MAX = USER;
const int Source_ARRAYSIZE = Source_MAX + 1;

// ===================================================================

class Beat : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:mixxx.track.io.Beat) */ {
 public:
  Beat();
  virtual ~Beat();

  Beat(const Beat& from);

  inline Beat& operator=(const Beat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Beat(Beat&& from) noexcept
    : Beat() {
    *this = ::std::move(from);
  }

  inline Beat& operator=(Beat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Beat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Beat* internal_default_instance() {
    return reinterpret_cast<const Beat*>(
               &_Beat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Beat* other);
  friend void swap(Beat& a, Beat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Beat* New() const final {
    return CreateMaybeMessage<Beat>(NULL);
  }

  Beat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Beat>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Beat& from);
  void MergeFrom(const Beat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Beat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 frame_position = 1;
  bool has_frame_position() const;
  void clear_frame_position();
  static const int kFramePositionFieldNumber = 1;
  ::google::protobuf::int32 frame_position() const;
  void set_frame_position(::google::protobuf::int32 value);

  // optional .mixxx.track.io.Source source = 3 [default = ANALYZER];
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 3;
  ::mixxx::track::io::Source source() const;
  void set_source(::mixxx::track::io::Source value);

  // optional bool enabled = 2 [default = true];
  bool has_enabled() const;
  void clear_enabled();
  static const int kEnabledFieldNumber = 2;
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:mixxx.track.io.Beat)
 private:
  void set_has_frame_position();
  void clear_has_frame_position();
  void set_has_enabled();
  void clear_has_enabled();
  void set_has_source();
  void clear_has_source();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 frame_position_;
  int source_;
  bool enabled_;
  friend struct ::protobuf_beats_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Bpm : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:mixxx.track.io.Bpm) */ {
 public:
  Bpm();
  virtual ~Bpm();

  Bpm(const Bpm& from);

  inline Bpm& operator=(const Bpm& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Bpm(Bpm&& from) noexcept
    : Bpm() {
    *this = ::std::move(from);
  }

  inline Bpm& operator=(Bpm&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Bpm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bpm* internal_default_instance() {
    return reinterpret_cast<const Bpm*>(
               &_Bpm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Bpm* other);
  friend void swap(Bpm& a, Bpm& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Bpm* New() const final {
    return CreateMaybeMessage<Bpm>(NULL);
  }

  Bpm* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Bpm>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Bpm& from);
  void MergeFrom(const Bpm& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Bpm* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double bpm = 1;
  bool has_bpm() const;
  void clear_bpm();
  static const int kBpmFieldNumber = 1;
  double bpm() const;
  void set_bpm(double value);

  // optional .mixxx.track.io.Source source = 2 [default = ANALYZER];
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 2;
  ::mixxx::track::io::Source source() const;
  void set_source(::mixxx::track::io::Source value);

  // @@protoc_insertion_point(class_scope:mixxx.track.io.Bpm)
 private:
  void set_has_bpm();
  void clear_has_bpm();
  void set_has_source();
  void clear_has_source();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double bpm_;
  int source_;
  friend struct ::protobuf_beats_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BeatMap : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:mixxx.track.io.BeatMap) */ {
 public:
  BeatMap();
  virtual ~BeatMap();

  BeatMap(const BeatMap& from);

  inline BeatMap& operator=(const BeatMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeatMap(BeatMap&& from) noexcept
    : BeatMap() {
    *this = ::std::move(from);
  }

  inline BeatMap& operator=(BeatMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BeatMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeatMap* internal_default_instance() {
    return reinterpret_cast<const BeatMap*>(
               &_BeatMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(BeatMap* other);
  friend void swap(BeatMap& a, BeatMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeatMap* New() const final {
    return CreateMaybeMessage<BeatMap>(NULL);
  }

  BeatMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeatMap>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BeatMap& from);
  void MergeFrom(const BeatMap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BeatMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mixxx.track.io.Beat beat = 1;
  int beat_size() const;
  void clear_beat();
  static const int kBeatFieldNumber = 1;
  ::mixxx::track::io::Beat* mutable_beat(int index);
  ::google::protobuf::RepeatedPtrField< ::mixxx::track::io::Beat >*
      mutable_beat();
  const ::mixxx::track::io::Beat& beat(int index) const;
  ::mixxx::track::io::Beat* add_beat();
  const ::google::protobuf::RepeatedPtrField< ::mixxx::track::io::Beat >&
      beat() const;

  // @@protoc_insertion_point(class_scope:mixxx.track.io.BeatMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mixxx::track::io::Beat > beat_;
  friend struct ::protobuf_beats_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BeatGrid : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:mixxx.track.io.BeatGrid) */ {
 public:
  BeatGrid();
  virtual ~BeatGrid();

  BeatGrid(const BeatGrid& from);

  inline BeatGrid& operator=(const BeatGrid& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeatGrid(BeatGrid&& from) noexcept
    : BeatGrid() {
    *this = ::std::move(from);
  }

  inline BeatGrid& operator=(BeatGrid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BeatGrid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeatGrid* internal_default_instance() {
    return reinterpret_cast<const BeatGrid*>(
               &_BeatGrid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(BeatGrid* other);
  friend void swap(BeatGrid& a, BeatGrid& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeatGrid* New() const final {
    return CreateMaybeMessage<BeatGrid>(NULL);
  }

  BeatGrid* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeatGrid>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BeatGrid& from);
  void MergeFrom(const BeatGrid& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BeatGrid* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mixxx.track.io.Bpm bpm = 1;
  bool has_bpm() const;
  void clear_bpm();
  static const int kBpmFieldNumber = 1;
  private:
  const ::mixxx::track::io::Bpm& _internal_bpm() const;
  public:
  const ::mixxx::track::io::Bpm& bpm() const;
  ::mixxx::track::io::Bpm* release_bpm();
  ::mixxx::track::io::Bpm* mutable_bpm();
  void set_allocated_bpm(::mixxx::track::io::Bpm* bpm);

  // optional .mixxx.track.io.Beat first_beat = 2;
  bool has_first_beat() const;
  void clear_first_beat();
  static const int kFirstBeatFieldNumber = 2;
  private:
  const ::mixxx::track::io::Beat& _internal_first_beat() const;
  public:
  const ::mixxx::track::io::Beat& first_beat() const;
  ::mixxx::track::io::Beat* release_first_beat();
  ::mixxx::track::io::Beat* mutable_first_beat();
  void set_allocated_first_beat(::mixxx::track::io::Beat* first_beat);

  // @@protoc_insertion_point(class_scope:mixxx.track.io.BeatGrid)
 private:
  void set_has_bpm();
  void clear_has_bpm();
  void set_has_first_beat();
  void clear_has_first_beat();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::mixxx::track::io::Bpm* bpm_;
  ::mixxx::track::io::Beat* first_beat_;
  friend struct ::protobuf_beats_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Beat

// optional int32 frame_position = 1;
inline bool Beat::has_frame_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Beat::set_has_frame_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Beat::clear_has_frame_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Beat::clear_frame_position() {
  frame_position_ = 0;
  clear_has_frame_position();
}
inline ::google::protobuf::int32 Beat::frame_position() const {
  // @@protoc_insertion_point(field_get:mixxx.track.io.Beat.frame_position)
  return frame_position_;
}
inline void Beat::set_frame_position(::google::protobuf::int32 value) {
  set_has_frame_position();
  frame_position_ = value;
  // @@protoc_insertion_point(field_set:mixxx.track.io.Beat.frame_position)
}

// optional bool enabled = 2 [default = true];
inline bool Beat::has_enabled() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Beat::set_has_enabled() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Beat::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Beat::clear_enabled() {
  enabled_ = true;
  clear_has_enabled();
}
inline bool Beat::enabled() const {
  // @@protoc_insertion_point(field_get:mixxx.track.io.Beat.enabled)
  return enabled_;
}
inline void Beat::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:mixxx.track.io.Beat.enabled)
}

// optional .mixxx.track.io.Source source = 3 [default = ANALYZER];
inline bool Beat::has_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Beat::set_has_source() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Beat::clear_has_source() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Beat::clear_source() {
  source_ = 0;
  clear_has_source();
}
inline ::mixxx::track::io::Source Beat::source() const {
  // @@protoc_insertion_point(field_get:mixxx.track.io.Beat.source)
  return static_cast< ::mixxx::track::io::Source >(source_);
}
inline void Beat::set_source(::mixxx::track::io::Source value) {
  assert(::mixxx::track::io::Source_IsValid(value));
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:mixxx.track.io.Beat.source)
}

// -------------------------------------------------------------------

// Bpm

// optional double bpm = 1;
inline bool Bpm::has_bpm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Bpm::set_has_bpm() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Bpm::clear_has_bpm() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Bpm::clear_bpm() {
  bpm_ = 0;
  clear_has_bpm();
}
inline double Bpm::bpm() const {
  // @@protoc_insertion_point(field_get:mixxx.track.io.Bpm.bpm)
  return bpm_;
}
inline void Bpm::set_bpm(double value) {
  set_has_bpm();
  bpm_ = value;
  // @@protoc_insertion_point(field_set:mixxx.track.io.Bpm.bpm)
}

// optional .mixxx.track.io.Source source = 2 [default = ANALYZER];
inline bool Bpm::has_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Bpm::set_has_source() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Bpm::clear_has_source() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Bpm::clear_source() {
  source_ = 0;
  clear_has_source();
}
inline ::mixxx::track::io::Source Bpm::source() const {
  // @@protoc_insertion_point(field_get:mixxx.track.io.Bpm.source)
  return static_cast< ::mixxx::track::io::Source >(source_);
}
inline void Bpm::set_source(::mixxx::track::io::Source value) {
  assert(::mixxx::track::io::Source_IsValid(value));
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:mixxx.track.io.Bpm.source)
}

// -------------------------------------------------------------------

// BeatMap

// repeated .mixxx.track.io.Beat beat = 1;
inline int BeatMap::beat_size() const {
  return beat_.size();
}
inline void BeatMap::clear_beat() {
  beat_.Clear();
}
inline ::mixxx::track::io::Beat* BeatMap::mutable_beat(int index) {
  // @@protoc_insertion_point(field_mutable:mixxx.track.io.BeatMap.beat)
  return beat_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::mixxx::track::io::Beat >*
BeatMap::mutable_beat() {
  // @@protoc_insertion_point(field_mutable_list:mixxx.track.io.BeatMap.beat)
  return &beat_;
}
inline const ::mixxx::track::io::Beat& BeatMap::beat(int index) const {
  // @@protoc_insertion_point(field_get:mixxx.track.io.BeatMap.beat)
  return beat_.Get(index);
}
inline ::mixxx::track::io::Beat* BeatMap::add_beat() {
  // @@protoc_insertion_point(field_add:mixxx.track.io.BeatMap.beat)
  return beat_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mixxx::track::io::Beat >&
BeatMap::beat() const {
  // @@protoc_insertion_point(field_list:mixxx.track.io.BeatMap.beat)
  return beat_;
}

// -------------------------------------------------------------------

// BeatGrid

// optional .mixxx.track.io.Bpm bpm = 1;
inline bool BeatGrid::has_bpm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeatGrid::set_has_bpm() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BeatGrid::clear_has_bpm() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BeatGrid::clear_bpm() {
  if (bpm_ != NULL) bpm_->Clear();
  clear_has_bpm();
}
inline const ::mixxx::track::io::Bpm& BeatGrid::_internal_bpm() const {
  return *bpm_;
}
inline const ::mixxx::track::io::Bpm& BeatGrid::bpm() const {
  const ::mixxx::track::io::Bpm* p = bpm_;
  // @@protoc_insertion_point(field_get:mixxx.track.io.BeatGrid.bpm)
  return p != NULL ? *p : *reinterpret_cast<const ::mixxx::track::io::Bpm*>(
      &::mixxx::track::io::_Bpm_default_instance_);
}
inline ::mixxx::track::io::Bpm* BeatGrid::release_bpm() {
  // @@protoc_insertion_point(field_release:mixxx.track.io.BeatGrid.bpm)
  clear_has_bpm();
  ::mixxx::track::io::Bpm* temp = bpm_;
  bpm_ = NULL;
  return temp;
}
inline ::mixxx::track::io::Bpm* BeatGrid::mutable_bpm() {
  set_has_bpm();
  if (bpm_ == NULL) {
    auto* p = CreateMaybeMessage<::mixxx::track::io::Bpm>(GetArenaNoVirtual());
    bpm_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mixxx.track.io.BeatGrid.bpm)
  return bpm_;
}
inline void BeatGrid::set_allocated_bpm(::mixxx::track::io::Bpm* bpm) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bpm_;
  }
  if (bpm) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bpm = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bpm, submessage_arena);
    }
    set_has_bpm();
  } else {
    clear_has_bpm();
  }
  bpm_ = bpm;
  // @@protoc_insertion_point(field_set_allocated:mixxx.track.io.BeatGrid.bpm)
}

// optional .mixxx.track.io.Beat first_beat = 2;
inline bool BeatGrid::has_first_beat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeatGrid::set_has_first_beat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BeatGrid::clear_has_first_beat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BeatGrid::clear_first_beat() {
  if (first_beat_ != NULL) first_beat_->Clear();
  clear_has_first_beat();
}
inline const ::mixxx::track::io::Beat& BeatGrid::_internal_first_beat() const {
  return *first_beat_;
}
inline const ::mixxx::track::io::Beat& BeatGrid::first_beat() const {
  const ::mixxx::track::io::Beat* p = first_beat_;
  // @@protoc_insertion_point(field_get:mixxx.track.io.BeatGrid.first_beat)
  return p != NULL ? *p : *reinterpret_cast<const ::mixxx::track::io::Beat*>(
      &::mixxx::track::io::_Beat_default_instance_);
}
inline ::mixxx::track::io::Beat* BeatGrid::release_first_beat() {
  // @@protoc_insertion_point(field_release:mixxx.track.io.BeatGrid.first_beat)
  clear_has_first_beat();
  ::mixxx::track::io::Beat* temp = first_beat_;
  first_beat_ = NULL;
  return temp;
}
inline ::mixxx::track::io::Beat* BeatGrid::mutable_first_beat() {
  set_has_first_beat();
  if (first_beat_ == NULL) {
    auto* p = CreateMaybeMessage<::mixxx::track::io::Beat>(GetArenaNoVirtual());
    first_beat_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mixxx.track.io.BeatGrid.first_beat)
  return first_beat_;
}
inline void BeatGrid::set_allocated_first_beat(::mixxx::track::io::Beat* first_beat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete first_beat_;
  }
  if (first_beat) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      first_beat = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, first_beat, submessage_arena);
    }
    set_has_first_beat();
  } else {
    clear_has_first_beat();
  }
  first_beat_ = first_beat;
  // @@protoc_insertion_point(field_set_allocated:mixxx.track.io.BeatGrid.first_beat)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace io
}  // namespace track
}  // namespace mixxx

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::mixxx::track::io::Source> : ::std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_beats_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: beats.proto

#include "beats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_beats_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_beats_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Beat;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_beats_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Bpm;
}  // namespace protobuf_beats_2eproto
namespace mixxx {
namespace track {
namespace io {
class BeatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Beat>
      _instance;
} _Beat_default_instance_;
class BpmDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Bpm>
      _instance;
} _Bpm_default_instance_;
class BeatMapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BeatMap>
      _instance;
} _BeatMap_default_instance_;
class BeatGridDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BeatGrid>
      _instance;
} _BeatGrid_default_instance_;
}  // namespace io
}  // namespace track
}  // namespace mixxx
namespace protobuf_beats_2eproto {
static void InitDefaultsBeat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mixxx::track::io::_Beat_default_instance_;
    new (ptr) ::mixxx::track::io::Beat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mixxx::track::io::Beat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Beat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBeat}, {}};

static void InitDefaultsBpm() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mixxx::track::io::_Bpm_default_instance_;
    new (ptr) ::mixxx::track::io::Bpm();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mixxx::track::io::Bpm::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Bpm =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBpm}, {}};

static void InitDefaultsBeatMap() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mixxx::track::io::_BeatMap_default_instance_;
    new (ptr) ::mixxx::track::io::BeatMap();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mixxx::track::io::BeatMap::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BeatMap =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBeatMap}, {
      &protobuf_beats_2eproto::scc_info_Beat.base,}};

static void InitDefaultsBeatGrid() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mixxx::track::io::_BeatGrid_default_instance_;
    new (ptr) ::mixxx::track::io::BeatGrid();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mixxx::track::io::BeatGrid::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_BeatGrid =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsBeatGrid}, {
      &protobuf_beats_2eproto::scc_info_Bpm.base,
      &protobuf_beats_2eproto::scc_info_Beat.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Beat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Bpm.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BeatMap.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BeatGrid.base);
}

}  // namespace protobuf_beats_2eproto
namespace mixxx {
namespace track {
namespace io {
bool Source_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Beat::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Beat::kFramePositionFieldNumber;
const int Beat::kEnabledFieldNumber;
const int Beat::kSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Beat::Beat()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_beats_2eproto::scc_info_Beat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mixxx.track.io.Beat)
}
Beat::Beat(const Beat& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&frame_position_, &from.frame_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&frame_position_)) + sizeof(enabled_));
  // @@protoc_insertion_point(copy_constructor:mixxx.track.io.Beat)
}

void Beat::SharedCtor() {
  ::memset(&frame_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&frame_position_)) + sizeof(source_));
  enabled_ = true;
}

Beat::~Beat() {
  // @@protoc_insertion_point(destructor:mixxx.track.io.Beat)
  SharedDtor();
}

void Beat::SharedDtor() {
}

void Beat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Beat& Beat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_beats_2eproto::scc_info_Beat.base);
  return *internal_default_instance();
}


void Beat::Clear() {
// @@protoc_insertion_point(message_clear_start:mixxx.track.io.Beat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&frame_position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_) -
        reinterpret_cast<char*>(&frame_position_)) + sizeof(source_));
    enabled_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Beat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:mixxx.track.io.Beat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 frame_position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_frame_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enabled = 2 [default = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mixxx.track.io.Source source = 3 [default = ANALYZER];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mixxx::track::io::Source_IsValid(value)) {
            set_source(static_cast< ::mixxx::track::io::Source >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mixxx.track.io.Beat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mixxx.track.io.Beat)
  return false;
#undef DO_
}

void Beat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mixxx.track.io.Beat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 frame_position = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->frame_position(), output);
  }

  // optional bool enabled = 2 [default = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enabled(), output);
  }

  // optional .mixxx.track.io.Source source = 3 [default = ANALYZER];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->source(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:mixxx.track.io.Beat)
}

size_t Beat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mixxx.track.io.Beat)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 frame_position = 1;
    if (has_frame_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frame_position());
    }

    // optional .mixxx.track.io.Source source = 3 [default = ANALYZER];
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

    // optional bool enabled = 2 [default = true];
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Beat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Beat*>(&from));
}

void Beat::MergeFrom(const Beat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mixxx.track.io.Beat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      frame_position_ = from.frame_position_;
    }
    if (cached_has_bits & 0x00000002u) {
      source_ = from.source_;
    }
    if (cached_has_bits & 0x00000004u) {
      enabled_ = from.enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Beat::CopyFrom(const Beat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mixxx.track.io.Beat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Beat::IsInitialized() const {
  return true;
}

void Beat::Swap(Beat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Beat::InternalSwap(Beat* other) {
  using std::swap;
  swap(frame_position_, other->frame_position_);
  swap(source_, other->source_);
  swap(enabled_, other->enabled_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Beat::GetTypeName() const {
  return "mixxx.track.io.Beat";
}


// ===================================================================

void Bpm::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bpm::kBpmFieldNumber;
const int Bpm::kSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bpm::Bpm()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_beats_2eproto::scc_info_Bpm.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mixxx.track.io.Bpm)
}
Bpm::Bpm(const Bpm& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bpm_, &from.bpm_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&bpm_)) + sizeof(source_));
  // @@protoc_insertion_point(copy_constructor:mixxx.track.io.Bpm)
}

void Bpm::SharedCtor() {
  ::memset(&bpm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&bpm_)) + sizeof(source_));
}

Bpm::~Bpm() {
  // @@protoc_insertion_point(destructor:mixxx.track.io.Bpm)
  SharedDtor();
}

void Bpm::SharedDtor() {
}

void Bpm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Bpm& Bpm::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_beats_2eproto::scc_info_Bpm.base);
  return *internal_default_instance();
}


void Bpm::Clear() {
// @@protoc_insertion_point(message_clear_start:mixxx.track.io.Bpm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&bpm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_) -
        reinterpret_cast<char*>(&bpm_)) + sizeof(source_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Bpm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:mixxx.track.io.Bpm)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double bpm = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_bpm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mixxx.track.io.Source source = 2 [default = ANALYZER];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mixxx::track::io::Source_IsValid(value)) {
            set_source(static_cast< ::mixxx::track::io::Source >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mixxx.track.io.Bpm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mixxx.track.io.Bpm)
  return false;
#undef DO_
}

void Bpm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mixxx.track.io.Bpm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double bpm = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->bpm(), output);
  }

  // optional .mixxx.track.io.Source source = 2 [default = ANALYZER];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->source(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:mixxx.track.io.Bpm)
}

size_t Bpm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mixxx.track.io.Bpm)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional double bpm = 1;
    if (has_bpm()) {
      total_size += 1 + 8;
    }

    // optional .mixxx.track.io.Source source = 2 [default = ANALYZER];
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Bpm::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Bpm*>(&from));
}

void Bpm::MergeFrom(const Bpm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mixxx.track.io.Bpm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      bpm_ = from.bpm_;
    }
    if (cached_has_bits & 0x00000002u) {
      source_ = from.source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Bpm::CopyFrom(const Bpm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mixxx.track.io.Bpm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bpm::IsInitialized() const {
  return true;
}

void Bpm::Swap(Bpm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bpm::InternalSwap(Bpm* other) {
  using std::swap;
  swap(bpm_, other->bpm_);
  swap(source_, other->source_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Bpm::GetTypeName() const {
  return "mixxx.track.io.Bpm";
}


// ===================================================================

void BeatMap::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeatMap::kBeatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeatMap::BeatMap()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_beats_2eproto::scc_info_BeatMap.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mixxx.track.io.BeatMap)
}
BeatMap::BeatMap(const BeatMap& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      beat_(from.beat_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mixxx.track.io.BeatMap)
}

void BeatMap::SharedCtor() {
}

BeatMap::~BeatMap() {
  // @@protoc_insertion_point(destructor:mixxx.track.io.BeatMap)
  SharedDtor();
}

void BeatMap::SharedDtor() {
}

void BeatMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeatMap& BeatMap::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_beats_2eproto::scc_info_BeatMap.base);
  return *internal_default_instance();
}


void BeatMap::Clear() {
// @@protoc_insertion_point(message_clear_start:mixxx.track.io.BeatMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  beat_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BeatMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:mixxx.track.io.BeatMap)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mixxx.track.io.Beat beat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_beat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mixxx.track.io.BeatMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mixxx.track.io.BeatMap)
  return false;
#undef DO_
}

void BeatMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mixxx.track.io.BeatMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mixxx.track.io.Beat beat = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->beat_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->beat(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:mixxx.track.io.BeatMap)
}

size_t BeatMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mixxx.track.io.BeatMap)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .mixxx.track.io.Beat beat = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->beat_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->beat(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeatMap::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BeatMap*>(&from));
}

void BeatMap::MergeFrom(const BeatMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mixxx.track.io.BeatMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  beat_.MergeFrom(from.beat_);
}

void BeatMap::CopyFrom(const BeatMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mixxx.track.io.BeatMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeatMap::IsInitialized() const {
  return true;
}

void BeatMap::Swap(BeatMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeatMap::InternalSwap(BeatMap* other) {
  using std::swap;
  CastToBase(&beat_)->InternalSwap(CastToBase(&other->beat_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BeatMap::GetTypeName() const {
  return "mixxx.track.io.BeatMap";
}


// ===================================================================

void BeatGrid::InitAsDefaultInstance() {
  ::mixxx::track::io::_BeatGrid_default_instance_._instance.get_mutable()->bpm_ = const_cast< ::mixxx::track::io::Bpm*>(
      ::mixxx::track::io::Bpm::internal_default_instance());
  ::mixxx::track::io::_BeatGrid_default_instance_._instance.get_mutable()->first_beat_ = const_cast< ::mixxx::track::io::Beat*>(
      ::mixxx::track::io::Beat::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeatGrid::kBpmFieldNumber;
const int BeatGrid::kFirstBeatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeatGrid::BeatGrid()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_beats_2eproto::scc_info_BeatGrid.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mixxx.track.io.BeatGrid)
}
BeatGrid::BeatGrid(const BeatGrid& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_bpm()) {
    bpm_ = new ::mixxx::track::io::Bpm(*from.bpm_);
  } else {
    bpm_ = NULL;
  }
  if (from.has_first_beat()) {
    first_beat_ = new ::mixxx::track::io::Beat(*from.first_beat_);
  } else {
    first_beat_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mixxx.track.io.BeatGrid)
}

void BeatGrid::SharedCtor() {
  ::memset(&bpm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&first_beat_) -
      reinterpret_cast<char*>(&bpm_)) + sizeof(first_beat_));
}

BeatGrid::~BeatGrid() {
  // @@protoc_insertion_point(destructor:mixxx.track.io.BeatGrid)
  SharedDtor();
}

void BeatGrid::SharedDtor() {
  if (this != internal_default_instance()) delete bpm_;
  if (this != internal_default_instance()) delete first_beat_;
}

void BeatGrid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeatGrid& BeatGrid::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_beats_2eproto::scc_info_BeatGrid.base);
  return *internal_default_instance();
}


void BeatGrid::Clear() {
// @@protoc_insertion_point(message_clear_start:mixxx.track.io.BeatGrid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(bpm_ != NULL);
      bpm_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(first_beat_ != NULL);
      first_beat_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BeatGrid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:mixxx.track.io.BeatGrid)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mixxx.track.io.Bpm bpm = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bpm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mixxx.track.io.Beat first_beat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_first_beat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mixxx.track.io.BeatGrid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mixxx.track.io.BeatGrid)
  return false;
#undef DO_
}

void BeatGrid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mixxx.track.io.BeatGrid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mixxx.track.io.Bpm bpm = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_bpm(), output);
  }

  // optional .mixxx.track.io.Beat first_beat = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_first_beat(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:mixxx.track.io.BeatGrid)
}

size_t BeatGrid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mixxx.track.io.BeatGrid)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional .mixxx.track.io.Bpm bpm = 1;
    if (has_bpm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *bpm_);
    }

    // optional .mixxx.track.io.Beat first_beat = 2;
    if (has_first_beat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *first_beat_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeatGrid::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BeatGrid*>(&from));
}

void BeatGrid::MergeFrom(const BeatGrid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mixxx.track.io.BeatGrid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_bpm()->::mixxx::track::io::Bpm::MergeFrom(from.bpm());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_first_beat()->::mixxx::track::io::Beat::MergeFrom(from.first_beat());
    }
  }
}

void BeatGrid::CopyFrom(const BeatGrid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mixxx.track.io.BeatGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeatGrid::IsInitialized() const {
  return true;
}

void BeatGrid::Swap(BeatGrid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeatGrid::InternalSwap(BeatGrid* other) {
  using std::swap;
  swap(bpm_, other->bpm_);
  swap(first_beat_, other->first_beat_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BeatGrid::GetTypeName() const {
  return "mixxx.track.io.BeatGrid";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace io
}  // namespace track
}  // namespace mixxx
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mixxx::track::io::Beat* Arena::CreateMaybeMessage< ::mixxx::track::io::Beat >(Arena* arena) {
  return Arena::CreateInternal< ::mixxx::track::io::Beat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mixxx::track::io::Bpm* Arena::CreateMaybeMessage< ::mixxx::track::io::Bpm >(Arena* arena) {
  return Arena::CreateInternal< ::mixxx::track::io::Bpm >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mixxx::track::io::BeatMap* Arena::CreateMaybeMessage< ::mixxx::track::io::BeatMap >(Arena* arena) {
  return Arena::CreateInternal< ::mixxx::track::io::BeatMap >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mixxx::track::io::BeatGrid* Arena::CreateMaybeMessage< ::mixxx::track::io::BeatGrid >(Arena* arena) {
  return Arena::CreateInternal< ::mixxx::track::io::BeatGrid >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
